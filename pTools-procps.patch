--- pTools-0.1/src/pldd/pldd.c.orig	2002-04-16 15:34:04.000000000 +0200
+++ pTools-0.1/src/pldd/pldd.c	2004-04-07 22:23:06.055969168 +0200
@@ -239,9 +239,9 @@
       continue;
     }
 
-    printf("%d:\t", curproc->pid);
+    printf("%d:\t", curproc->tid);
 
-    snprintf(buf, BUFLN, "/proc/%d/maps", curproc->pid);
+    snprintf(buf, BUFLN, "/proc/%d/maps", curproc->tid);
 
     /* Open the input file */
     ifile = fopen(buf, "r");
--- pTools-0.1/src/pcred/pcred.c.orig	2002-04-16 15:34:04.000000000 +0200
+++ pTools-0.1/src/pcred/pcred.c	2004-04-07 22:21:49.382625288 +0200
@@ -87,7 +87,7 @@
  */
 void PrintCred(proc_t *p) {
   
-  printf("%d:\t", p->pid);
+  printf("%d:\t", p->tid);
 
   if ( (p->euid == p->ruid) && 
        (p->ruid == p->suid) && 
@@ -172,10 +172,10 @@
     }
 
     /* Open status file of cur_pid */
-    statfd = fOpenPid(curproc->pid, "status");
+    statfd = fOpenPid(curproc->tid, "status");
     if (!statfd) {
       printf("%s: cannot examine %d: permission denied\n",
-	     argv[0], curproc->pid);
+	     argv[0], curproc->tid);
       continue;
     }
 
--- pTools-0.1/src/pflags/pflags.c.orig	2002-04-16 15:34:04.000000000 +0200
+++ pTools-0.1/src/pflags/pflags.c	2004-04-07 22:22:43.106458024 +0200
@@ -69,7 +69,7 @@
   /* Solaris has multiple LWP's but we don't (really),
    * this support will be added later
    */
-  snprintf(buf, BUFLN, "/proc/%d/stack", p->pid);
+  snprintf(buf, BUFLN, "/proc/%d/stack", p->tid);
   fd = open(buf, O_RDONLY);
   if (fd < 0) {
 #ifdef _PTOOLS_DEBUG
@@ -88,7 +88,7 @@
 
 
 
-  printf("%d:\t%s\n", p->pid, *(p->cmdline));
+  printf("%d:\t%s\n", p->tid, *(p->cmdline));
   /* NOTE: This is hard-coded for the i386 architecture
    * We should change this by accessing the binary with the
    * elf libraries if possible
@@ -189,7 +189,7 @@
     }
 
     if (do_pflags(curproc) < 0)
-      printf("Error processing PID %d, skipping.\n", curproc->pid);
+      printf("Error processing PID %d, skipping.\n", curproc->tid);
 
     freeproc(curproc);
     curproc = NULL;
--- pTools-0.1/src/prun/prun.c.orig	2002-04-16 15:34:04.000000000 +0200
+++ pTools-0.1/src/prun/prun.c	2004-04-07 22:23:44.827075064 +0200
@@ -62,21 +62,21 @@
       continue;
     }
 
-    fprintf(stderr, "Processing PID: %d\tRunning\n", curproc->pid);
+    fprintf(stderr, "Processing PID: %d\tRunning\n", curproc->tid);
 
-    snprintf(buf, BUFLN, "/proc/%d/ctl", curproc->pid);
+    snprintf(buf, BUFLN, "/proc/%d/ctl", curproc->tid);
     ctlfd = open(buf, O_WRONLY);
 
     if (ctlfd < 0) {
       switch(errno) {
       case EACCES:
-	fprintf(stderr, "%d: Permission denied\n", curproc->pid);
+	fprintf(stderr, "%d: Permission denied\n", curproc->tid);
 	freeproc(curproc); continue;
 	break;
 	
       case ENOENT:
 	fprintf(stderr, "%s: cannot control %d: no such process\n",
-		argv[0], curproc->pid);
+		argv[0], curproc->tid);
 	freeproc(curproc); continue;
 	break;
       };
@@ -86,7 +86,7 @@
 
     if (write(ctlfd, (char *)(&msg), sizeof(ctl_t)) < 0) {
       fprintf(stderr, "%s: error during write() to ctl file of %d\n",
-	      argv[0], curproc->pid);
+	      argv[0], curproc->tid);
     }
 
     close(ctlfd);
--- pTools-0.1/src/psig/psig.c.orig	2002-04-16 15:34:04.000000000 +0200
+++ pTools-0.1/src/psig/psig.c	2004-04-07 22:24:18.337980632 +0200
@@ -117,7 +117,7 @@
 
 
   /* Open sigact file */
-  snprintf(buf, BUFLN, "/proc/%d/sigact", p->pid);
+  snprintf(buf, BUFLN, "/proc/%d/sigact", p->tid);
   if ( (fd = open(buf, O_RDONLY)) < 0) {
 #ifdef _PTOOLS_DEBUG
     fprintf(stderr, "open(%s, O_RDONLY): failed, %d\n", buf, errno);
@@ -137,7 +137,7 @@
 
 
   /* Print PID and command line */
-  printf("%d:\t%s\n", p->pid, p->cmdline[0]);
+  printf("%d:\t%s\n", p->tid, p->cmdline[0]);
 
   /* Go through each signal */
   for(sig = 1; sig < SIGRTMIN; sig++) {
--- pTools-0.1/src/pstop/pstop.c.orig	2002-04-16 15:34:04.000000000 +0200
+++ pTools-0.1/src/pstop/pstop.c	2004-04-07 22:25:00.374590096 +0200
@@ -57,21 +57,21 @@
       continue;
     }
 
-    fprintf(stderr, "Processing PID: %d\tStopping\n", curproc->pid);
+    fprintf(stderr, "Processing PID: %d\tStopping\n", curproc->tid);
 
-    snprintf(buf, BUFLN, "/proc/%d/ctl", curproc->pid);
+    snprintf(buf, BUFLN, "/proc/%d/ctl", curproc->tid);
     ctlfd = open(buf, O_WRONLY);
 
     if (ctlfd < 0) {
       switch(errno) {
       case EACCES:
-	fprintf(stderr, "%d: Permission denied\n", curproc->pid);
+	fprintf(stderr, "%d: Permission denied\n", curproc->tid);
 	freeproc(curproc); continue;
 	break;
 	
       case ENOENT:
 	fprintf(stderr, "%s: cannot control %d: no such process\n",
-		argv[0], curproc->pid);
+		argv[0], curproc->tid);
 	freeproc(curproc); continue;
 	break;
       };
@@ -81,7 +81,7 @@
 
     if (write(ctlfd, (char *)(&msg), sizeof(ctl_t)) < 0) {
       fprintf(stderr, "%s: error during write() to ctl file of %d\n",
-	      argv[0], curproc->pid);
+	      argv[0], curproc->tid);
     }
 
     close(ctlfd);
--- pTools-0.1/src/ptree/ptree.c.orig	2002-04-16 15:34:04.000000000 +0200
+++ pTools-0.1/src/ptree/ptree.c	2004-04-07 22:26:41.757177600 +0200
@@ -80,7 +80,7 @@
     return NULL;
 
   /* look here/terminate recursion */
-  if ( (t->pent) && (t->pent->pid == p) )
+  if ( (t->pent) && (t->pent->tid == p) )
     return t;
   
   /* recurse over children */
@@ -118,13 +118,13 @@
   if (cur)   t = MkTnode(cur, NULL, NULL);
   if (!t) return NULL;
 
-  if (cur->pid != INIT)   t = MkTnode(NULL, NULL, t);
+  if (cur->tid != INIT)   t = MkTnode(NULL, NULL, t);
   if (!t) return NULL;
 
   /* Pass one over /proc, generates initial tree */
   while ( (cur = readproc(p, NULL)) ) {
 
-    if (cur->pid == INIT) {
+    if (cur->tid == INIT) {
       t->pent = cur;
       continue;
     }
@@ -200,7 +200,7 @@
   if (t)
     printf("%*c", t, ' '); /* Print 'tab' spaces */
   
-  printf("%-6d", p->pid);
+  printf("%-6d", p->tid);
   
   if (p->cmdline)
     printf("%s\n", p->cmdline[0]);
@@ -255,7 +255,7 @@
     /* continue should be just fine */
     if ( (!tmp->data) || (!tmp->data->pent) ) continue;
 
-    if ( (tmp->data->pent->pid == 1) && (!PrintInit) ) continue;
+    if ( (tmp->data->pent->tid == 1) && (!PrintInit) ) continue;
 
     if (tmp->data->visited) { tab+=2; continue; }
 
@@ -348,7 +348,7 @@
 
   if ( (t->visited == false) && (t->pent) && (t->pent->ruid == id) ) {
     /* Build up a list of parents */
-    PrintPID(NULL, t->pent->pid);
+    PrintPID(NULL, t->pent->tid);
   }
 
 
@@ -450,7 +450,7 @@
 
   PROGNAME = argv[0];
 
-  PT = openproc(PROC_FILLCMD|PROC_FILLSTAT|PROC_FILLSTATUS, 0);
+  PT = openproc(PROC_FILLARG|PROC_FILLSTAT|PROC_FILLSTATUS, 0);
   if (!PT) {
     fprintf(stderr, "Internal openproc() error\n");
     return -1;
--- pTools-0.1/src/pwait/pwait.c.orig	2001-11-16 17:41:37.000000000 +0100
+++ pTools-0.1/src/pwait/pwait.c	2004-04-07 22:26:57.972712464 +0200
@@ -69,9 +69,9 @@
       }
     }
 
-    fprintf(stderr, "Working with %d\n", procinfo->pid);
+    fprintf(stderr, "Working with %d\n", procinfo->tid);
 
-    snprintf(buf, BUFLN, "/proc/%d/stat", procinfo->pid);
+    snprintf(buf, BUFLN, "/proc/%d/stat", procinfo->tid);
     fd = open(buf, O_RDONLY);
     if (fd < 0) { /* Process already ended ??? */
       freeproc(procinfo);
--- pTools-0.1/lib/args.c.orig	2002-04-16 15:34:04.000000000 +0200
+++ pTools-0.1/lib/args.c	2004-04-07 22:21:02.769711528 +0200
@@ -394,7 +394,7 @@
   cur = plist;
   
   while (cur) {
-    if (cur->data->pid == p) {
+    if (cur->data->tid == p) {
       /* found a match */
       ret = cur->data;
       if (cur == plist) plist = cur->next;
@@ -467,9 +467,9 @@
       /* If not what was expected buffer it if we havn't processed
        * it already
        */
-      if (cur->dataN != ret->pid) {
+      if (cur->dataN != ret->tid) {
 	int tmp;
-	tmp = Visited(ret->pid);
+	tmp = Visited(ret->tid);
 	if (tmp == TRUE) goto GetAnotherEntry;
 	else if (tmp == -1) return ret; /* We don't know about this one
 					 * but we return it anyway.
